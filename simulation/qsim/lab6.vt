// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2024 02:07:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PROBLEM_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PROBLEM_1_vlg_sample_tst(
	clk,
	data,
	enable,
	sampler_tx
);
input  clk;
input  data;
input  enable;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data or enable)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PROBLEM_1_vlg_check_tst (
	id,
	neg1,
	neg2,
	opcode,
	R1,
	R2,
	seg1,
	seg2,
	sampler_rx
);
input [6:0] id;
input [6:0] neg1;
input [6:0] neg2;
input [15:0] opcode;
input [3:0] R1;
input [3:0] R2;
input [6:0] seg1;
input [6:0] seg2;
input sampler_rx;

reg [6:0] id_expected;
reg [6:0] neg1_expected;
reg [6:0] neg2_expected;
reg [15:0] opcode_expected;
reg [3:0] R1_expected;
reg [3:0] R2_expected;
reg [6:0] seg1_expected;
reg [6:0] seg2_expected;

reg [6:0] id_prev;
reg [6:0] neg1_prev;
reg [6:0] neg2_prev;
reg [15:0] opcode_prev;
reg [3:0] R1_prev;
reg [3:0] R2_prev;
reg [6:0] seg1_prev;
reg [6:0] seg2_prev;

reg [15:0] opcode_expected_prev;
reg [3:0] R1_expected_prev;
reg [3:0] R2_expected_prev;

reg [15:0] last_opcode_exp;
reg [3:0] last_R1_exp;
reg [3:0] last_R2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	id_prev = id;
	neg1_prev = neg1;
	neg2_prev = neg2;
	opcode_prev = opcode;
	R1_prev = R1;
	R2_prev = R2;
	seg1_prev = seg1;
	seg2_prev = seg2;
end

// update expected /o prevs

always @(trigger)
begin
	opcode_expected_prev = opcode_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
end


// expected opcode[ 15 ]
initial
begin
	opcode_expected[15] = 1'bX;
end 
// expected opcode[ 14 ]
initial
begin
	opcode_expected[14] = 1'bX;
end 
// expected opcode[ 13 ]
initial
begin
	opcode_expected[13] = 1'bX;
end 
// expected opcode[ 12 ]
initial
begin
	opcode_expected[12] = 1'bX;
end 
// expected opcode[ 11 ]
initial
begin
	opcode_expected[11] = 1'bX;
end 
// expected opcode[ 10 ]
initial
begin
	opcode_expected[10] = 1'bX;
end 
// expected opcode[ 9 ]
initial
begin
	opcode_expected[9] = 1'bX;
end 
// expected opcode[ 8 ]
initial
begin
	opcode_expected[8] = 1'bX;
end 
// expected opcode[ 7 ]
initial
begin
	opcode_expected[7] = 1'bX;
end 
// expected opcode[ 6 ]
initial
begin
	opcode_expected[6] = 1'bX;
end 
// expected opcode[ 5 ]
initial
begin
	opcode_expected[5] = 1'bX;
end 
// expected opcode[ 4 ]
initial
begin
	opcode_expected[4] = 1'bX;
end 
// expected opcode[ 3 ]
initial
begin
	opcode_expected[3] = 1'bX;
end 
// expected opcode[ 2 ]
initial
begin
	opcode_expected[2] = 1'bX;
end 
// expected opcode[ 1 ]
initial
begin
	opcode_expected[1] = 1'bX;
end 
// expected opcode[ 0 ]
initial
begin
	opcode_expected[0] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 
// generate trigger
always @(id_expected or id or neg1_expected or neg1 or neg2_expected or neg2 or opcode_expected or opcode or R1_expected or R1 or R2_expected or R2 or seg1_expected or seg1 or seg2_expected or seg2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected id = %b | expected neg1 = %b | expected neg2 = %b | expected opcode = %b | expected R1 = %b | expected R2 = %b | expected seg1 = %b | expected seg2 = %b | ",id_expected_prev,neg1_expected_prev,neg2_expected_prev,opcode_expected_prev,R1_expected_prev,R2_expected_prev,seg1_expected_prev,seg2_expected_prev);
	$display("| real id = %b | real neg1 = %b | real neg2 = %b | real opcode = %b | real R1 = %b | real R2 = %b | real seg1 = %b | real seg2 = %b | ",id_prev,neg1_prev,neg2_prev,opcode_prev,R1_prev,R2_prev,seg1_prev,seg2_prev);
`endif
	if (
		( opcode_expected_prev[0] !== 1'bx ) && ( opcode_prev[0] !== opcode_expected_prev[0] )
		&& ((opcode_expected_prev[0] !== last_opcode_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[0] = opcode_expected_prev[0];
	end
	if (
		( opcode_expected_prev[1] !== 1'bx ) && ( opcode_prev[1] !== opcode_expected_prev[1] )
		&& ((opcode_expected_prev[1] !== last_opcode_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[1] = opcode_expected_prev[1];
	end
	if (
		( opcode_expected_prev[2] !== 1'bx ) && ( opcode_prev[2] !== opcode_expected_prev[2] )
		&& ((opcode_expected_prev[2] !== last_opcode_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[2] = opcode_expected_prev[2];
	end
	if (
		( opcode_expected_prev[3] !== 1'bx ) && ( opcode_prev[3] !== opcode_expected_prev[3] )
		&& ((opcode_expected_prev[3] !== last_opcode_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[3] = opcode_expected_prev[3];
	end
	if (
		( opcode_expected_prev[4] !== 1'bx ) && ( opcode_prev[4] !== opcode_expected_prev[4] )
		&& ((opcode_expected_prev[4] !== last_opcode_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[4] = opcode_expected_prev[4];
	end
	if (
		( opcode_expected_prev[5] !== 1'bx ) && ( opcode_prev[5] !== opcode_expected_prev[5] )
		&& ((opcode_expected_prev[5] !== last_opcode_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[5] = opcode_expected_prev[5];
	end
	if (
		( opcode_expected_prev[6] !== 1'bx ) && ( opcode_prev[6] !== opcode_expected_prev[6] )
		&& ((opcode_expected_prev[6] !== last_opcode_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[6] = opcode_expected_prev[6];
	end
	if (
		( opcode_expected_prev[7] !== 1'bx ) && ( opcode_prev[7] !== opcode_expected_prev[7] )
		&& ((opcode_expected_prev[7] !== last_opcode_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[7] = opcode_expected_prev[7];
	end
	if (
		( opcode_expected_prev[8] !== 1'bx ) && ( opcode_prev[8] !== opcode_expected_prev[8] )
		&& ((opcode_expected_prev[8] !== last_opcode_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[8] = opcode_expected_prev[8];
	end
	if (
		( opcode_expected_prev[9] !== 1'bx ) && ( opcode_prev[9] !== opcode_expected_prev[9] )
		&& ((opcode_expected_prev[9] !== last_opcode_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[9] = opcode_expected_prev[9];
	end
	if (
		( opcode_expected_prev[10] !== 1'bx ) && ( opcode_prev[10] !== opcode_expected_prev[10] )
		&& ((opcode_expected_prev[10] !== last_opcode_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[10] = opcode_expected_prev[10];
	end
	if (
		( opcode_expected_prev[11] !== 1'bx ) && ( opcode_prev[11] !== opcode_expected_prev[11] )
		&& ((opcode_expected_prev[11] !== last_opcode_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[11] = opcode_expected_prev[11];
	end
	if (
		( opcode_expected_prev[12] !== 1'bx ) && ( opcode_prev[12] !== opcode_expected_prev[12] )
		&& ((opcode_expected_prev[12] !== last_opcode_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[12] = opcode_expected_prev[12];
	end
	if (
		( opcode_expected_prev[13] !== 1'bx ) && ( opcode_prev[13] !== opcode_expected_prev[13] )
		&& ((opcode_expected_prev[13] !== last_opcode_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[13] = opcode_expected_prev[13];
	end
	if (
		( opcode_expected_prev[14] !== 1'bx ) && ( opcode_prev[14] !== opcode_expected_prev[14] )
		&& ((opcode_expected_prev[14] !== last_opcode_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[14] = opcode_expected_prev[14];
	end
	if (
		( opcode_expected_prev[15] !== 1'bx ) && ( opcode_prev[15] !== opcode_expected_prev[15] )
		&& ((opcode_expected_prev[15] !== last_opcode_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_exp[15] = opcode_expected_prev[15];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PROBLEM_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg data;
reg enable;
// wires                                               
wire [6:0] id;
wire [6:0] neg1;
wire [6:0] neg2;
wire [15:0] opcode;
wire [3:0] R1;
wire [3:0] R2;
wire [6:0] seg1;
wire [6:0] seg2;

wire sampler;                             

// assign statements (if any)                          
PROBLEM_1 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data(data),
	.enable(enable),
	.id(id),
	.neg1(neg1),
	.neg2(neg2),
	.opcode(opcode),
	.R1(R1),
	.R2(R2),
	.seg1(seg1),
	.seg2(seg2)
);

// data
initial
begin
	data = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// enable
initial
begin
	enable = 1'b1;
end 

PROBLEM_1_vlg_sample_tst tb_sample (
	.clk(clk),
	.data(data),
	.enable(enable),
	.sampler_tx(sampler)
);

PROBLEM_1_vlg_check_tst tb_out(
	.id(id),
	.neg1(neg1),
	.neg2(neg2),
	.opcode(opcode),
	.R1(R1),
	.R2(R2),
	.seg1(seg1),
	.seg2(seg2),
	.sampler_rx(sampler)
);
endmodule

